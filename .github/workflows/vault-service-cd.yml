name: Vault service CD

on:
  push:
    branches:
      - main
    paths:
      - "vault-service/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (dev/test/prod)"
        required: true
        default: "dev"

defaults:
  run:
    shell: bash
    working-directory: ./vault-service

env:
  APP_NAME: "vault-service"
  TAG_NAME: "dev"

jobs:
  vault-service-cd-by-push:
    runs-on: ubuntu-20.04

    if: github.event_name == 'push' && github.repository == 'pwei1018/bcregistry-sre'
    environment:
      name: "dev"

    steps:
      - uses: actions/checkout@v2

      - name: Set env
        run: |
          echo "::set-output name=ENV_NAME::$TAG_NAME"

  vault-service-cd-by-dispatch:
    runs-on: ubuntu-20.04

    if: github.event_name == 'workflow_dispatch' && github.repository == 'pwei1018/bcregistry-sre'
    environment:
      name: "${{ github.event.inputs.environment }}"

    steps:
      - uses: actions/checkout@v2
      - name: Set env by input
        run: |
          echo "TAG_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "::set-output name=ENV_NAME::$TAG_NAME"

  vault-service-cd-flow:
    runs-on: ubuntu-20.04
    needs: [vault-service-cd-by-push, vault-service-cd-by-dispatch]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Env
        shell: bash
        run: |
          echo "TAG_NAME=${{ needs.*.outputs.ENV_NAME }}"
          echo $TAG_NAME

      - name: Login Openshift
        shell: bash
        run: |
          oc login --server=${{secrets.OPENSHIFT4_LOGIN_REGISTRY}} --token=${{secrets.OPENSHIFT4_SA_TOKEN}}

      - name: Push Image to Repo
        id: imagePushing
        shell: bash
        env:
          OPS_REPOSITORY: ${{ secrets.OPS_REPOSITORY }}
          OPENSHIFT_DOCKER_REGISTRY: ${{ secrets.OPENSHIFT4_DOCKER_REGISTRY }}
          OPENSHIFT_SA_NAME: ${{ secrets.OPENSHIFT4_SA_NAME }}
          OPENSHIFT_SA_TOKEN: ${{ secrets.OPENSHIFT4_SA_TOKEN }}
          OPENSHIFT_REPOSITORY: ${{ secrets.OPENSHIFT4_REPOSITORY }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          make cd
          make image-sha

      - name: Update Version
        id: updateVersion
        shell: bash
        env:
          TAG_NAME: ${{ env.TAG_NAME }}
          IMAGE_SHA: ${{ steps.imagePushing.outputs.imagesha }}
        run: |
          make update-version

      # Update the image ID in the manifest repository used by Argo CD.
      # We need to use the SSH deploy key to check out the manifest repo, set up
      # Kustomize in the runner, update the image ID, commit the change, and
      # push the changes back to the manifest repository.
      # ------------------------------------------------------------------------
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.MANIFEST_REPO_73C567_DEPLOY_KEY }}

      - name: Check out manifest repo
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.MANIFEST_REPO_73C567_DEPLOY_KEY }}
          repository: ${{ secrets.MANIFEST_REPO_73C567 }}

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Update image ID and commit change
        if: ${{ success() }}
        run: |
          cd overlays/${{ env.TAG_NAME }}
          kustomize edit set image "vault-service-image=${{ secrets.OPENSHIFT4_IMAGE_REGISTRY }}/${{ secrets.OPENSHIFT4_REPOSITORY }}tools/vault-service@${{ steps.imagePushing.outputs.imagesha }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update image ID for ${{ env.TAG_NAME }}"
          git push origin
