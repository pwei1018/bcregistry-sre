name: Backend App CD OCP

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      app_name:
        required: true
        type: string
      working_directory:
        type: string
        default: "."
    secrets:
      # 1Password Authentication - Use either OP_SERVICE_ACCOUNT_TOKEN or both OP_CONNECT_URL and OP_CONNECT_TOKEN
      OP_SERVICE_ACCOUNT_TOKEN:
        required: false
      OP_CONNECT_URL:
        required: false
      OP_CONNECT_TOKEN:
        required: false
      # OpenShift Configuration
      OPENSHIFT_DOCKER_REGISTRY:
        required: true
      OPENSHIFT_LOGIN_REGISTRY:
        required: true
      OPENSHIFT_SA_NAME:
        required: true
      OPENSHIFT_SA_TOKEN:
        required: true
      OPENSHIFT_REPOSITORY:
        required: true

jobs:
  setup:
    # Only allow run the CD flow in protected branch
    if: github.ref_protected == true

    runs-on: ubuntu-24.04

    defaults:
      run:
        shell: bash

    # Allow add the tag in the repo.
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "write"
      id-token: "none"

    outputs:
      TARGETS: ${{ steps.setenv.outputs.TARGETS }}
      TARGET: ${{ steps.setenv.outputs.TARGET }}
      TARGET_FROM: ${{ steps.setenv.outputs.TARGET_FROM }}
      PROJECT: ${{ steps.setenv.outputs.PROJECT }}

    steps:
      # Checkout code
      - name: Checkout out the code
        uses: actions/checkout@v4

      - name: Setup targets
        uses: bcgov/bcregistry-sre/.github/actions/setup-deployment-target@main
        with:
          environment: ${{ inputs.target }}
          app_name: ${{ inputs.app_name }}

      - id: setenv
        run: |
          echo "TARGETS=${{ env.DEPLOY_TARGETS }}" >> "$GITHUB_OUTPUT"
          echo "TARGET=${{ env.DEPLOY_TARGET }}" >> "$GITHUB_OUTPUT"
          echo "TARGET_FROM=${{ env.TARGET_FROM }}" >> "$GITHUB_OUTPUT"
          echo "PIPELINE=${{ env.DEPLOY_PIPELINE }}" >> "$GITHUB_OUTPUT"
          if [ "${{ env.DEPLOY_TARGET }}" = "sandbox" ]; then
            PROJECT="tools"
          else
            PROJECT="${{ env.DEPLOY_TARGET }}"
          fi
          echo "PROJECT=$PROJECT" >> "$GITHUB_OUTPUT"

  deploy:
    needs: setup
    runs-on: ubuntu-24.04

    environment:
      name: "${{ needs.setup.outputs.TARGET }}"

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    # Allow add the tag in the repo.
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "write"
      id-token: "write"

    steps:
      - uses: actions/checkout@v4

      # Install 1password cli tool
      - name: Install 1password cli tool
        uses: bcgov/bcregistry-sre/.github/actions/install-1pass@main

      # Get environment variables from 1password
      - name: Setup .env file
        working-directory: ${{ inputs.working_directory }}
        env:
          OP_CONNECT_HOST: ${{ secrets.OP_CONNECT_URL }}
          OP_CONNECT_TOKEN: ${{ secrets.OP_CONNECT_TOKEN }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          APP_ENV: ${{ needs.setup.outputs.TARGET }}
        run: |-
          # Use either OP_SERVICE_ACCOUNT_TOKEN or (OP_CONNECT_HOST and OP_CONNECT_TOKEN)
          if [ -n "$OP_SERVICE_ACCOUNT_TOKEN" ]; then
            echo "Using OP_SERVICE_ACCOUNT_TOKEN for authentication"
            unset OP_CONNECT_HOST OP_CONNECT_TOKEN
            op inject -i ./devops/vaults.ocp.env -o .env -f
          elif [ -n "$OP_CONNECT_HOST" ] && [ -n "$OP_CONNECT_TOKEN" ]; then
            echo "Using OP_CONNECT_HOST and OP_CONNECT_TOKEN for authentication"
            unset OP_SERVICE_ACCOUNT_TOKEN
            op inject -i ./devops/vaults.ocp.env -o .env -f
          else
            echo "Error: Either OP_SERVICE_ACCOUNT_TOKEN or both OP_CONNECT_HOST and OP_CONNECT_TOKEN must be provided"
            exit 1
          fi

      - name: Install CLI tools from OpenShift
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4"

      - name: Login Openshift
        shell: bash
        run: |-
          oc login --server=${{secrets.OPENSHIFT_LOGIN_REGISTRY}} --token=${{secrets.OPENSHIFT_SA_TOKEN}}

      - name: Update deployment secret
        working-directory: ${{ inputs.working_directory }}
        shell: bash
        env:
          SECRET_NAME: ${{ inputs.app_name }}-${{ needs.setup.outputs.TARGET }}-secret
          NAMESPACE: ${{ secrets.OPENSHIFT_REPOSITORY }}-${{ needs.setup.outputs.PROJECT }}

        run: |-
          LABELS=$(oc get secret ${SECRET_NAME} -o jsonpath='{.metadata.labels}' -n ${NAMESPACE})
          ANNOTATIONS=$(oc get secret ${SECRET_NAME} -o jsonpath='{.metadata.annotations}' -n ${NAMESPACE})
          SECRET_JSON=$(oc create secret generic ${SECRET_NAME} -n ${NAMESPACE} --from-env-file=.env --dry-run=client -o json)
          echo $SECRET_JSON | oc replace -f -
          oc patch secret ${SECRET_NAME} --type='json' -p='[{"op":"add","path":"/metadata/labels", "value":'$LABELS'}]' -n ${NAMESPACE}
          oc patch secret ${SECRET_NAME} --type='json' -p='[{"op":"add","path":"/metadata/annotations", "value":'$ANNOTATIONS'}]' -n ${NAMESPACE} && rm .env

      - name: Build/push image
        if: ${{ needs.setup.outputs.TARGET == 'dev' }}
        working-directory: ${{ inputs.working_directory }}
        shell: bash
        env:
          REGISTRY_IMAGE: ${{ secrets.OPENSHIFT_DOCKER_REGISTRY }}/${{ secrets.OPENSHIFT_REPOSITORY }}-tools/${{ inputs.app_name }}
          DOCKER_REGISTRY: ${{ secrets.OPENSHIFT_DOCKER_REGISTRY }}
          SA_NAME: ${{ secrets.OPENSHIFT_SA_NAME }}
          SA_TOKEN: ${{ secrets.OPENSHIFT_SA_TOKEN }}
          APP_NAME: ${{ inputs.app_name }}
        run: |-
          docker build . -t ${APP_NAME} \
            --platform linux/amd64 \
            --build-arg VCS_REF=$(git rev-parse --short HEAD) \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "${SA_TOKEN}" | docker login ${DOCKER_REGISTRY} -u ${SA_NAME} --password-stdin
          docker tag ${APP_NAME} ${REGISTRY_IMAGE}:latest
          docker push ${REGISTRY_IMAGE}:latest

      - name: Tag image
        shell: bash
        env:
          TOOLS_NAMESPACE: ${{ secrets.OPENSHIFT_REPOSITORY }}-tools
          NAMESPACE: ${{ secrets.OPENSHIFT_REPOSITORY }}-${{ needs.setup.outputs.PROJECT }}
          APP_NAME: ${{ inputs.app_name }}
          TAG_NAME: ${{ needs.setup.outputs.TARGET }}
        run: |-
          case  ${TAG_NAME}  in
            dev)
              oc -n "${TOOLS_NAMESPACE}" tag ${APP_NAME}:latest ${APP_NAME}:${TAG_NAME}
              ;;
            test)
              oc -n "${TOOLS_NAMESPACE}" tag ${APP_NAME}:dev ${APP_NAME}:${TAG_NAME}
              ;;
            prod)
              oc -n "${TOOLS_NAMESPACE}" tag ${APP_NAME}:${TAG_NAME} ${APP_NAME}:${TAG_NAME}-$(shell date +%F)
              oc -n "${TOOLS_NAMESPACE}" tag ${APP_NAME}:test ${APP_NAME}:${TAG_NAME}
              ;;
          esac

      - name: Deployment
        shell: bash
        env:
          FULL_APP_NAME: ${{ inputs.app_name }}-${{ needs.setup.outputs.TARGET }}
          NAMESPACE: ${{ secrets.OPENSHIFT_REPOSITORY }}-${{ needs.setup.outputs.PROJECT }}
        run: |-
          oc -n "${NAMESPACE}" rollout restart deployment ${FULL_APP_NAME}

      - name: Watch new rollout
        shell: bash
        env:
          FULL_APP_NAME: ${{ inputs.app_name }}-${{ needs.setup.outputs.TARGET }}
          NAMESPACE: ${{ secrets.OPENSHIFT_REPOSITORY }}-${{ needs.setup.outputs.PROJECT }}
        run: |-
          oc -n "${NAMESPACE}" rollout status -w deployment ${FULL_APP_NAME}
